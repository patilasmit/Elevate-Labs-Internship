CREATE DATABASE ECOMMERCE;
Use ecommerce;
select * from orders;
select * from customers;
select * from geolocation;
select * from order_items;
select * from payments;
select * from products;
select * from sellers;

------------------------------------------ Basic Queries ------------------------------------
-- 1.List all unique cities where customers are located.
select distinct customer_city from customers;

-- 2.Count the number of orders placed in 2017.
select count(order_id) 
from orders
where year(order_purchase_timestamp) = 2017;

-- 3.Find the total sales per category.
select products.product_category as product_categorys , sum(payments.payment_value) as value
from products
join order_items on products.product_id = order_items.product_id
join payments on order_items.order_id = payments.order_id
group by product_categorys 
order by value desc;

-- 4.Calculate the percentage of orders that were paid in installments.
select  sum(CASE WHEN payment_installments >= 1 THEN 1 else 0 end)/count(*)*100 from payments;

-- 5.Count the number of customers from each state.
select count(customer_id) as customer_count,customer_state
from customers 
group by customer_state
order by customer_count desc;

---------------------------------------Intermediate Queries---------------------------------------------------------
-- 1.Calculate the number of orders per month in 2018.
select count(order_id) as numbers_of_orders,monthname(order_purchase_timestamp) as months 
from orders
where year(order_purchase_timestamp) = 2018
group by  months 
order by numbers_of_orders desc

-- 2.Find the average number of products per order, grouped by customer city.
with avg_per_order as(
select orders.order_id , orders.customer_id , count(order_items.order_id) as avg_per_order
from orders 
join order_items on orders.order_id = order_items.order_id
group by orders.order_id , orders.customer_id)
select customers.customer_city,round(avg(avg_per_order),2)as avg_number_of_orders
from customers
join avg_per_order on customers.customer_id = avg_per_order.customer_id
group by customers.customer_city;

-- 3.Calculate the percentage of total revenue contributed by each product category.
select products.product_category as product_categorys ,
 (sum(payments.payment_value)/(select sum(payment_value) from payments))*100 as total_revenue_by_each_products
from products
join order_items on products.product_id = order_items.product_id
join payments on order_items.order_id = payments.order_id
group by product_categorys 
order by total_revenue_by_each_products;

-- 4.Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category , count(order_items.order_id) as number_of_orders,
round(avg(order_items.price),2) as product_price
from order_items
join products on order_items.product_id = products.product_id
group by products.product_category;

--5.Calculate the total revenue generated by each seller, and rank them by revenue.
with rank_by_revenue_gen as (
	select p.product_category as product_categorys , s.seller_id as seller,
		(sum(pay.payment_value) / (select sum(payment_value) from payments) * 100)  as total_revenue_by_each_seller
	from products p
	join order_items  oi on p.product_id = oi.product_id
	join payments pay on oi.order_id = pay.order_id
	join sellers s on oi.seller_id = s.seller_id
	group by p.product_category ,  s.seller_id )

select product_categorys,seller,total_revenue_by_each_seller,
Dense_RANK() over(partition by product_categorys order by total_revenue_by_each_seller desc ) as ranks_by_revenue
from  rank_by_revenue_gen
 order by product_categorys , ranks_by_revenue ;
 
 ------------------------------------Advanced Queries-------------------------------------------------------------------
-- 1.Calculate the moving average of order values for each customer over their order history.
select customer_id, order_purchase_timestamp, payment,
avg(payment) over(partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row) as mov_avg
from
(select orders.customer_id, orders.order_purchase_timestamp, 
payments.payment_value as payment
from payments join orders
on payments.order_id = orders.order_id) as a;

-- 2.Calculate the cumulative sales per month for each year.
select years, months , payment, sum(payment)
over(order by years, months) cumulative_sales from 
(select year(orders.order_purchase_timestamp) as years,
month(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) as payment from orders join payments
on orders.order_id = payments.order_id
group by years, months order by years, months) as a;

-- 3.Calculate the year-over-year growth rate of total sales.
with year_over_year as(
select year(orders.order_purchase_timestamp) as years,
round(sum(payments.payment_value),2) as payment from orders 
join payments on orders.order_id = payments.order_id
group by years order by years)
select years, ((payment - lag(payment,1) over(order by years))/
lag(payment,1) over(order by years)) * 100 
from year_over_year ;

-- 4.Identify the top 3 customers who spent the most money in each year.
select years, customer_id, payment, d_rank
from
(select year(orders.order_purchase_timestamp) years,
orders.customer_id,
sum(payments.payment_value) payment,
dense_rank() over(partition by year(orders.order_purchase_timestamp)
order by sum(payments.payment_value) desc) d_rank
from orders
join payments on payments.order_id = orders.order_id
group by year(orders.order_purchase_timestamp), orders.customer_id) as a
where d_rank <= 3;

---------------------------------Ad-Hoc-Analysis----------------------------------------
-- 1.Refine Monthly Revenue & Order Volume Query
SELECT 
    YEAR(orders.order_purchase_timestamp) AS year,
    MONTH(orders.order_purchase_timestamp) AS month,
    SUM(payments.payment_value) AS monthly_revenue,
    COUNT(orders.order_id) AS order_volume
FROM Orders 
join payments on payments.order_id = orders.order_id
GROUP BY YEAR(orders.order_purchase_timestamp), MONTH(orders.order_purchase_timestamp)
ORDER BY year, month;

-- 2.Top 3 Months by Revenue
SELECT 
    YEAR(orders.order_purchase_timestamp) AS year,
    MONTH(orders.order_purchase_timestamp) AS month,
    Round(SUM(payments.payment_value),2) AS monthly_revenue
FROM Orders
join payments on payments.order_id = orders.order_id
GROUP BY YEAR(orders.order_purchase_timestamp), MONTH(orders.order_purchase_timestamp)
ORDER BY monthly_revenue DESC
LIMIT 3;

-- 3.Monthly Active Customers (MAC)
SELECT 
    YEAR(orders.order_purchase_timestamp) AS year,
    MONTH(orders.order_purchase_timestamp) AS month,
    COUNT(DISTINCT customers.customer_id) AS active_customers
FROM Orders
join customers on orders.customer_id = customers.customer_id
GROUP BY YEAR(orders.order_purchase_timestamp), MONTH(orders.order_purchase_timestamp)
ORDER BY year, month;

-- 4.Order Delivery Status
SELECT order_id, order_status, order_delivered_customer_date,order_estimated_delivery_date,
    CASE 
        WHEN order_delivered_customer_date <= order_estimated_delivery_date THEN 'On Time'
        WHEN order_delivered_customer_date IS NULL THEN 'Not Delivered'
        ELSE 'Late'
    END AS delivery_status
FROM orders;

-- 5.Payment Value Buckets
SELECT orders.order_id,payments.payment_value,
    CASE 
        WHEN payments.payment_value < 50 THEN 'Low'
        WHEN payments.payment_value BETWEEN 50 AND 150 THEN 'Medium'
        ELSE 'High'
    END AS payment_value_category
FROM orders
join payments on payments.order_id = orders.order_id;

-- 6. Customer Location by Region (based on State)
SELECT customer_id,customer_state,
    CASE 
        WHEN customer_state IN ('SP', 'RJ', 'MG', 'ES') THEN 'Southeast'
        WHEN customer_state IN ('PR', 'SC', 'RS') THEN 'South'
        WHEN customer_state IN ('DF', 'GO', 'MT', 'MS') THEN 'Central-West'
        WHEN customer_state IN ('BA', 'PE', 'CE', 'MA', 'PB', 'RN', 'AL', 'SE', 'PI') THEN 'Northeast'
        ELSE 'North'
    END AS region
FROM customers;



